#!/usr/bin/env perl -w
#
# listen - listen on a TCP port, accept connection and do simple I/O
#
# Copyright (c) 2000-2010,2017,2023 by Landon Curt Noll.  All Rights Reserved.
#
# Permission to use, copy, modify, and distribute this software and
# its documentation for any purpose and without fee is hereby granted,
# provided that the above copyright, this permission notice and text
# this comment, and the disclaimer below appear in all of the following:
#
#       supporting documentation
#       source copies
#       source works derived from this source
#       binaries derived from this source or from derived source
#
# LANDON CURT NOLL DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
# INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO
# EVENT SHALL LANDON CURT NOLL BE LIABLE FOR ANY SPECIAL, INDIRECT OR
# CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF
# USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
# OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
# PERFORMANCE OF THIS SOFTWARE.
#
# chongo <was here> /\oo/\
#
# Share and enjoy!

# requirements
#
use strict;
use bytes;
use vars qw($opt_v $opt_d);
use POSIX;
use Getopt::Long;
use Socket;
use IO::Select;
use IO::Socket;
use Fcntl;

# my vars
#
my $version = '@(#) $Revision: 1.10 $';		# program version

# usage and help
#
my $usage = "listen [-v] [-d] [interface:]port";
my $help = qq{Usage:

  $0 $usage

	[interface:]port	the local interface and port to listen on

	-d	daemon mode, re-listen after connection is dropped
	-v	verbose / debug mode
};
my %optctl = (
    "v+" => \$opt_v,	"d" => \$opt_d
);


# setup
#
MAIN: {
    my $int_arg;		# [interface:]port arg
    my $server;			# server listening socket
    my $client;			# client socket
    my $client_port;		# client's port on their host
    my $client_addr;		# client remote socket address
    my $client_host;		# client hostname or IP address as .-ed string
    my $client_ip;		# client IP address
    my $client_addrstr;		# client IP address as .-ed string

    # set the defaults
    #
    $opt_v = 0;

    # parse args
    #
    if (!GetOptions(%optctl)) {
	&error(1, "usage: $0 $usage");
    }
    if ($#ARGV != 0) {
	&error(2, "usage: $0 $usage");
    }
    $int_arg = $ARGV[0];
    &debug(1, "debug level: $opt_v");

    # setup
    #
    STDIN->blocking(0);
    STDOUT->blocking(0);
    STDOUT->autoflush(1);
    STDERR->blocking(0);
    STDERR->autoflush(1);

    # setup the server port
    #
    $server = &listen_setup($int_arg);

    # listen for a connection
    #
    do {

	# accept the new connection
	#
	&debug(1, "listening for a connection");
	($client, $client_addr) = $server->accept();
	if (! defined $client || ! defined $client_addr) {
	    &warn("unable to accept connection: $!");
	    next;
	}

	# determine information about the new client
	#
	($client_port, $client_ip) = sockaddr_in($client_addr);
	$client_addrstr = inet_ntoa($client_ip);
	if (!($client_host = gethostbyaddr(inet_aton($client_addrstr), AF_INET))) {
	    $client_host = $client_addrstr;
	}
	&debug(1, "accepted connection from $client_addrstr($client_port) == $client_host($client_port)");

	# process I/O from client as needed
	#
	&process_client($client);
	&debug(2, "after call to process_client");

    } while(defined $opt_d);

    # all done
    #
    &debug(1, "not in daemon mode, exiting");
    exit(0);
}


# error - report an error and exit
#
# given:
#       $exitval	exit code value
#       $msg		the message to print
#
sub error($$)
{
    my ($exitval, $msg) = @_;    # get args

    # parse args
    #
    if (!defined $exitval) {
	$exitval = 254;
    }
    if (!defined $msg) {
	$msg = "<<< no message supplied >>>";
    }
    if ($exitval =~ /\D/) {
	$msg .= "<<< non-numeric exit code: $exitval >>>";
	$exitval = 253;
    }

    # issue the error message
    #
    print STDERR "$0: $msg\n";

    # issue an error message
    #
    exit($exitval);
}


# warn - report an problem and continue
#
# given:
#       $msg		the message to print
#
sub warn($$)
{
    my ($msg) = @_;    # get args

    # parse args
    #
    if (!defined $msg) {
	$msg = "<<< no message supplied >>>";
    }

    # issue the error message
    #
    print STDERR "$0: Warning: $msg\n";
}


# debug - print a debug message is debug level is high enough
#
# given:
#       $min_lvl	minimum debug level required to print
#       $msg		message to print
#
sub debug($$)
{
    my ($min_lvl, $msg) = @_;    # get args

    # firewall
    #
    if (!defined $min_lvl) {
    	&error(3, "debug called without a minimum debug level");
    }
    if ($min_lvl =~ /\D/) {
    	&error(4, "debug called with non-numeric debug level: $min_lvl");
    }
    if ($opt_v < $min_lvl) {
	return;
    }
    if (!defined $msg) {
    	&error(5, "debug called without a message");
    }

    # issue the error message
    #
    print STDERR "DEBUG: $msg\n";
}


# listen_setup - setup a socket to listen on
#
# given:
#	$int_arg;		# [interface:]port arg
#
# returns:
#	file handle of socket bound to the [interface:]port
#
sub listen_setup($)
{
    my $int_arg = $_[0];	# get arg
    my $port_arg;		# port portion of the arg
    my $int_host;		# interface host name
    my $int_addr;		# interface IP address
    my $int_addrstr;		# interface IP address as a .-ed string
    my $sock_addr;		# listen socket addr
    my $port;			# TCP port to listen on
    my $listen;			# listening socket

    # determine the interface address or use INADDR_ANY
    #
    if ($int_arg =~ /:/) {

	# obtain the interface name and split out the port
	#
	$int_arg =~ /^(.*):([^:]*)$/;
	$int_host = $1;
	$port_arg = $2;
	if (!defined($int_host) || $int_host =~ /^$/) {
	    $int_host = "localhost";
	}

	# determine the IP address of the interface
	#
	$int_addr = gethostbyname($int_host) or
	    &error(6, "interface name: $int_host is unknown");
	$int_addrstr = inet_ntoa($int_addr);
	&debug(1, "listening only on interface: $int_host ($int_addrstr)");

    } else {

	# will listen on any interface
	#
	$port_arg = $int_arg;
	&debug(1, "listening on any interface");
    }

    # determine the port number to listen on
    #
    if ($port_arg !~ /^[0-9]+$/) {
	(undef, undef, $port, undef) = getservbyname($port_arg, "tcp");
	if (! defined($port)) {
	    &error(7, "port name: $port is unknown");
	}
    } else {
    	$port = $port_arg;
    }
    &debug(1, "will listen on port: $port");

    # form a socket to listen on
    #
    &debug(2, "pre listen");
    if (defined($int_addr)) {
	$listen = IO::Socket::INET->new(LocalAddr => $int_addrstr,
					LocalPort => $port,
					Proto => "tcp",
					Type => SOCK_STREAM,
					Listen => SOMAXCONN,
					Reuse => 1);
    } else {
	$listen = IO::Socket::INET->new(LocalPort => $port,
					Proto => "tcp",
					Type => SOCK_STREAM,
					Listen => SOMAXCONN,
					Reuse => 1);
    }
    if (! defined $listen) {
    	&error(8, "unable created a listen queue to TCP/$port");
    }
    &debug(1, "listen queue created");

    # return the socket
    #
    return $listen;
}


# process_client - process I/O to/from client from/to stdin/stdout
#
# given:
#	CLIENT		client socket handle
#
sub process_client(*)
{
    my $client = $_[0];		# get client socket handle
    my $rd_select;		# select() call object for reading
    my $stdout_buf;		# STDOUT output buffer
    my $stdout_len;		# STDOUT output buffer length
    my $client_buf;		# client output buffer
    my $client_len;		# client output buffer length
    my $stuck_write;		# 1 ==> a write had a non-fatal error
    my $stuck_read;		# 1 ==> a read had a non-fatal error

    # set non-blocking I/O on client socket
    #
    &non_block($client);

    # clear buffers
    #
    $stdout_buf = '';
    $stdout_len = 0;
    $client_buf = '';
    $client_len = 0;

    # process until one of the select handles has an error or EOF
    #
    &debug(2, "pre I/O loop");
    $stuck_read = 0;
    $stuck_write = 0;
    while (1) {

	my $fh;			# selected file handle
	my $rv;			# recv() or sysread() return value
	my $wv;			# send() or syswrite() return value
	my $data;		# data read from STDIN or client
	my $data_len;		# length of data read
	my $wr_select;		# select() call object for writing
	my $rd_timeout;		# timeout for recv() or sysread() select
	my $wr_timeout;		# timeout for send() or syswrite() select

	# determine what we will read select on
	#
	# We will wait on read select forever ONLY if both buffers are empty.
	# If either buffer is non-empty and non-full, then we
	# will do an immediate (non-waiting) read select.  If both
	# buffers are full, we will not read select at all.
	#
	$stuck_read = 0;
	$rd_select = IO::Select->new();
	$rd_timeout = undef;
	if ($client_len < POSIX::BUFSIZ) {
	    $rd_select->add(*STDIN);
	    $rd_timeout = 0.0 if $client_len > 0;
	}
	if ($stdout_len < POSIX::BUFSIZ) {
	    $rd_select->add($client);
	    $rd_timeout = 0.0 if $stdout_len > 0;
	}

	# We do not want to do an immediate (non-waiting) read select
	# if a previous write was "stuck" due to some non-fatal error
	# such as EAGAIN or EWOULDBLOCK.
	#
	if ($stuck_write && $rd_timeout <= 0.0) {
	    $rd_timeout = 1.0;
	}

	# note what the read timeout will be
	#
	if (defined $rd_timeout) {
	    &debug(2, "read select $rd_timeout secs");
	} else {
	    &debug(2, "read select forever");
	}

	# case: both buffers are full
	#
	if ($rd_select->count() <= 0) {
	    &debug(2, "both STDIN and client buffers are full");
	    if ($stuck_write) {
		&debug(2, "forced read pause for a second");
		$rd_select->can_read(1.0);
	    }

	# case: some buffer has room for reading
	#
	# process each readable descriptor, if we have any
	#
	} else {
	    &debug(3, "pre read select loop");
	    foreach $fh ($rd_select->can_read($rd_timeout)) {

		# read STDIN if needed
		#
		if ($fh eq *STDIN) {

		    # read what we thing is available on STDIN directly
		    # into the client buffer
		    #
		    $rv = sysread(STDIN, $client_buf, POSIX::BUFSIZ);
		    if (!defined($rv) || $rv < 0) {

			# case: STDIN read would have blocked
			#
			if ($! == POSIX::EWOULDBLOCK) {
			    &debug(3, "STDIN read would have blocked");
			    $stuck_read = 1;

			# case: STDIN read should be tried again
			#
			} elsif ($! == POSIX::EAGAIN) {
			    &debug(3, "STDIN read try again later");
			    $stuck_read = 1;

			# case: a serious STDIN recv error
			#
			} else {
			    # case: client read error
			    &error(10, "STDIN read error: $!");
			}

		    } elsif ($rv == 0) {
			&debug(1, "EOF on STDIN, exiting normally");
			$client->close();
			exit(0);
		    }
		    &debug(3, "read $rv octets from STDIN");

		    # note new length of buffer
		    #
		    $client_len = length $client_buf;

		# read the socket if needed
		#
		} else {

		    # read the socket data
		    #
		    $data = '';
		    $rv = $fh->recv($data, POSIX::BUFSIZ, 0);

		    # case: recv did not return an error
		    #
		    if (defined($rv)) {

			# determine how much was read
			#
			$data_len = length $data;

			# case EOF: stop processing client
			#
			if ($data_len <= 0) {
			    &debug(1, "EOF on client");
			    $client->close();
			    return;

			# case: read some data
			#
			} else {

			    # add client data to STDOUT buffer for later writing
			    #
			    &debug(3, "read $data_len octets from client");
			    $stdout_buf .= $data;
			    $stdout_len += $data_len;
			}

		    # case: recv error
		    #
		    } else {

			# case: client recv would have blocked
			#
			if ($! == POSIX::EWOULDBLOCK) {
			    &debug(3, "client recv would have blocked");
			    $stuck_read = 1;

			# case: client recv should be tried again
			#
			} elsif ($! == POSIX::EAGAIN) {
			    &debug(3, "client recv try again later");
			    $stuck_read = 1;

			# case: a serious client recv error
			#
			} else {
			    # case: client read error
			    &error(10, "client recv error: $!");
			}
		    }
		}
	    }
	    &debug(3, "post read select loop");
	}

	# determine what we will write select on
	#
	# If both buffers are full, then we will write select forever.
	# If any buffer is non-empty and non-full then we will write select
	# for up to 1 second.  If both buffers are empty, then we will
	# not write select at all.
	#
	$stuck_write = 0;
	$wr_select = IO::Select->new();
	$wr_timeout = undef;
	if ($client_len > 0) {
	    $wr_select->add($client);
	    $wr_timeout = 1.0;
	}
	if ($stdout_len > 0) {
	    $wr_select->add(*STDOUT);
	    $wr_timeout = 1.0;
	}

	# note what the write timeout will be
	#
	if (defined $wr_timeout) {
	    &debug(2, "write select $wr_timeout secs");
	} else {
	    &debug(2, "write select forever");
	}

	# case: both buffers are empty
	#
	if ($wr_select->count() <= 0) {
	    &debug(2, "both STDIN and client buffers are empty");
	    if ($stuck_read) {
		&debug(2, "forced write pause for a second");
		$rd_select->can_write(1.0);
	    }

	# case: some buffer has data to write
	#
	# process each writable descriptor, if any
	#
	} else {
	    &debug(3, "pre write select loop");
	    foreach $fh ($wr_select->can_write($wr_timeout)) {

		# write STDOUT if needed
		#
		if ($fh eq *STDOUT) {

		    # write as much data to STDOUT as we can
		    #
		    $wv = syswrite(STDOUT, $stdout_buf, $stdout_len);

		    # remove written data from the buffer
		    #
		    if (defined $wv && $wv > 0) {
			substr($stdout_buf, 0, $wv) = '';
			$stdout_len -= $wv;
			&debug(3, "wrote $wv octets to STDOUT");

		    # case: STDIN write would have blocked
		    #
		    } elsif ($! == POSIX::EWOULDBLOCK) {
			&debug(3, "STDIN write would have blocked");
			$stuck_write = 1;

		    # case: STDIN write should be tried again
		    #
		    } elsif ($! == POSIX::EAGAIN) {
			&debug(3, "STDIN write try again later");
			$stuck_write = 1;

		    # EOF on write, time to close down
		    #
		    } elsif ($wv == 0) {
			&debug(1, "stdout EOF, exiting normally");
			$client->close();
			exit(0);

		    # error in wring data, stop processing stdout
		    #
		    } else {
			&error(13, "write to STDOUT failed: $!");
		    }

		# write client if needed
		#
		} else {

		    # send as much data to the client as we can
		    #
		    $wv = $client->send($client_buf, 0);

		    # remove written data from the buffer
		    #
		    if (defined $wv && $wv > 0) {
			substr($client_buf, 0, $wv) = '';
			$client_len -= $wv;
			&debug(3, "wrote $wv octets to client");

		    # case: client write would have blocked
		    #
		    } elsif ($! == POSIX::EWOULDBLOCK) {
			&debug(3, "client write would have blocked");
			$stuck_write = 1;

		    # case: client write should be tried again
		    #
		    } elsif ($! == POSIX::EAGAIN) {
			&debug(3, "client write try again later");

		    # EOF on write, time to close down
		    #
		    } elsif ($wv == 0) {
			&debug(1, "write to client EOF, closing client");
			$client->close();
			return;

		    # error in wring data, stop processing client
		    #
		    } else {
			&debug(1, "write to client failed: $!, closing client");
			$client->close();
			return;
		    }
		}
	    }
	    &debug(3, "post write select loop");
	}
    }
    &debug(2, "post I/O loop");

    # client has been processed
    #
    return;
}


# non_block - put descriptor into non-blocking mode
#
# given:
#	$io		socket or handle
#
sub non_block($)
{
    my $handle = shift;		# get arg
    my $flags;			# fcntl flags

    # set POSIX non-blocking I/O
    #
    $flags = fcntl($handle, F_GETFL, 0) or &error(14, "cannot get flags");
    $flags = fcntl($handle, F_SETFL, $flags | O_NONBLOCK) or
        &error(15, "cannot set non-blocking flags");

    # flush on writes
    #
    $handle->autoflush(1);
    return;
}
